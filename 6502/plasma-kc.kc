import "benchcommon"
import "c64"

const word SCREEN1 = 0xE000;
const word SCREEN2 = 0xE400;
const word CHARSET = 0xE800;
const byte PAGE1 = $8a; // ((SCREEN1 >> 6) & 0xF0) | ((CHARSET >> 10) & 0x0E);
const byte PAGE2 = $9a; // ((SCREEN2 >> 6) & 0xF0) | ((CHARSET >> 10) & 0x0E);

const byte [0x100] align($100) sinustable = {
    0x80, 0x7d, 0x7a, 0x77, 0x74, 0x70, 0x6d, 0x6a,
    0x67, 0x64, 0x61, 0x5e, 0x5b, 0x58, 0x55, 0x52,
    0x4f, 0x4d, 0x4a, 0x47, 0x44, 0x41, 0x3f, 0x3c,
    0x39, 0x37, 0x34, 0x32, 0x2f, 0x2d, 0x2b, 0x28,
    0x26, 0x24, 0x22, 0x20, 0x1e, 0x1c, 0x1a, 0x18,
    0x16, 0x15, 0x13, 0x11, 0x10, 0x0f, 0x0d, 0x0c,
    0x0b, 0x0a, 0x08, 0x07, 0x06, 0x06, 0x05, 0x04,
    0x03, 0x03, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03,
    0x03, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x0a,
    0x0b, 0x0c, 0x0d, 0x0f, 0x10, 0x11, 0x13, 0x15,
    0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24,
    0x26, 0x28, 0x2b, 0x2d, 0x2f, 0x32, 0x34, 0x37,
    0x39, 0x3c, 0x3f, 0x41, 0x44, 0x47, 0x4a, 0x4d,
    0x4f, 0x52, 0x55, 0x58, 0x5b, 0x5e, 0x61, 0x64,
    0x67, 0x6a, 0x6d, 0x70, 0x74, 0x77, 0x7a, 0x7d,
    0x80, 0x83, 0x86, 0x89, 0x8c, 0x90, 0x93, 0x96,
    0x99, 0x9c, 0x9f, 0xa2, 0xa5, 0xa8, 0xab, 0xae,
    0xb1, 0xb3, 0xb6, 0xb9, 0xbc, 0xbf, 0xc1, 0xc4,
    0xc7, 0xc9, 0xcc, 0xce, 0xd1, 0xd3, 0xd5, 0xd8,
    0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8,
    0xea, 0xeb, 0xed, 0xef, 0xf0, 0xf1, 0xf3, 0xf4,
    0xf5, 0xf6, 0xf8, 0xf9, 0xfa, 0xfa, 0xfb, 0xfc,
    0xfd, 0xfd, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfd,
    0xfd, 0xfc, 0xfb, 0xfa, 0xfa, 0xf9, 0xf8, 0xf6,
    0xf5, 0xf4, 0xf3, 0xf1, 0xf0, 0xef, 0xed, 0xeb,
    0xea, 0xe8, 0xe6, 0xe4, 0xe2, 0xe0, 0xde, 0xdc,
    0xda, 0xd8, 0xd5, 0xd3, 0xd1, 0xce, 0xcc, 0xc9,
    0xc7, 0xc4, 0xc1, 0xbf, 0xbc, 0xb9, 0xb6, 0xb3,
    0xb1, 0xae, 0xab, 0xa8, 0xa5, 0xa2, 0x9f, 0x9c,
    0x99, 0x96, 0x93, 0x90, 0x8c, 0x89, 0x86, 0x83
};


byte[40] xbuf;
byte[25] ybuf;

void doplasma (byte* scrn)
{
    byte c1a,c1b;
    byte c2a,c2b;
    byte c1A,c1B;
    byte c2A,c2B;
    byte i, ii;
    byte j, jj;

    c1a = c1A;
    c1b = c1B;
    for (ii = 0; ii < 25; ++ii) {
        ybuf[ii] = (sinustable[c1a] + sinustable[c1b]);
        c1a += 4;
        c1b += 9;
    }
    c1A += 3;
    c1B -= 5;
    c2a = c2A;
    c2b = c2B;
    for (i = 0; i < 40; ++i) {
        xbuf[i] = (sinustable[c2a] + sinustable[c2b]);
        c2a += 3;
        c2b += 7;
    }
    c2A += 2;
    c2B -= 3;
    for (jj = 0; jj < 25; ++jj) {
        for (j = 0; j < 40; ++j) {
            scrn[j] = (xbuf[j] + ybuf[jj]);
        }
        scrn += 40;
    }
    
}


const byte[] bittab = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
};
    
void makechar (void)
{ 
    byte i, ii, b, s;
    unsigned int c;

    for (c = 0; c < 0x100; ++c) {
        s = sinustable[(byte)c];
        for (i = 0; i < 8; ++i){
            b = 0;
            for (ii = 0; ii < 8; ++ii) {
                if ((rand() & 0xFF) > s) {
                    b |= bittab[ii];
                }
            }
            ((byte*)CHARSET) [(c<<3) + i] = b;
        }
    }
}



int main (void)
{
    byte v;
    byte block;
    unsigned int count = 500;
    
    makechar();

    start();

    block = *CIA2_PORT_A;
    byte tmp;
    tmp = block & 0xFC;
    tmp |= (byte)((SCREEN1 >> 14) ^ 0x03);
    *CIA2_PORT_A = tmp;
    v = *VIC_MEMORY;

    /* Run the demo until a key was hit */
    while (count) {
        /* Build page 1, then make it visible */
        doplasma ((byte*)SCREEN1);
        *VIC_MEMORY = PAGE1;

        /* Build page 2, then make it visible */
        doplasma ((byte*)SCREEN2);
        *VIC_MEMORY = PAGE2;

        /* Count frames */
        --count;
    }

    *VIC_MEMORY = v;
    *CIA2_PORT_A = block;

    /* Reset screen colors */
    end();
    
    return 0;
}
